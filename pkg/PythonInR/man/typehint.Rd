% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/typehints.R
\name{typehint}
\alias{th.cvxopt}
\alias{th.float}
\alias{th.int}
\alias{th.list}
\alias{th.list_int}
\alias{th.list_str}
\alias{th.long}
\alias{th.numpy}
\alias{th.numpy_int}
\alias{th.numpy_str}
\alias{th.pandas}
\alias{th.scibsr}
\alias{th.scicoo}
\alias{th.scicsc}
\alias{th.scicsr}
\alias{th.scidia}
\alias{th.scidok}
\alias{th.scilil}
\alias{th.string}
\alias{th.tlist}
\alias{th.tlist ## comment(x) <- "tlist"}
\alias{th.tlist_int}
\alias{th.tlist_str}
\alias{th.ttuple}
\alias{th.ttuple_int}
\alias{th.ttuple_str}
\alias{th.tuple}
\alias{th.tuple_int}
\alias{th.tuple_str}
\alias{th.unicode}
\alias{th.vector}
\alias{th.vector_int}
\alias{th.vector_str}
\alias{typehint}
\title{Additional Type Information}
\usage{
th.int(x)

th.long(x)

th.float(x)

th.string(x)

th.unicode(x)

th.vector(x)

th.vector_int(x)

th.vector_str(x)

th.list(x)

th.list_int(x)

th.list_str(x)

th.tuple(x)

th.tuple_int(x)

th.tuple_str(x)

th.ttuple(x)

th.ttuple_int(x)

th.ttuple_str(x)

th.tlist(x)

th.tlist_str(x)

th.tlist_int(x)

th.numpy(x)

th.numpy_int(x)

th.numpy_str(x)

th.scibsr(x)

th.scicoo(x)

th.scicsc(x)

th.scicsr(x)

th.scidia(x)

th.scidok(x)

th.scilil(x)

th.cvxopt(x)

th.pandas(x)
}
\arguments{
\item{x}{an R object}
}
\description{
The function \code{typehint} allows to set / get additional type information 
  in a structured way. Similar to \code{as..*} (e.g. \code{as.list}) 
  \pkg{PythonInR} provides \code{th..*} (e.g. \code{th.list}) functions to 
  control the type conversion done by \pkg{PythonInR}.
}
\details{
Since typehints are implemented as comments one can use the comment
   command directly to avoid copying.
}
\examples{
\dontshow{PythonInR:::pyCranConnect()}
pySet("vec", 1:3) ## v will be assigned as PythonInR.vector
pyType("vec")
## li will be assigned as list, where the elements are of type long
pySet("li", th.list(1:3)) 
pyType("li")
pySet("li_int", th.list_int(1:3)) 
pyType("li_int")
pySet("x", th.tuple(list(1, 2))) ## x will be assigned as tuple
pyType("x")
}

